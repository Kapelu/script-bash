import Image from "next/image"

export default function Componentes() {
	return (
		<>
			<section className='seccion'>
				<article className='contenedor'>
					<h1 className='titulo'>Componentes en ReactJS</h1>
					<p className='descripcion'>
						React es una librer√≠a JavaScript que nos permite crear
						interfaces de usuario en el proceso de desarrollar
						aplicaciones de una sola p√°gina. Estas aplicaciones
						tambi√©n son conocidas como SPA (single page
						application). Para construir una aplicaci√≥n completa en
						React, recomendamos un framework full-stack de React
						como Next.js
						<br />
						Dentro de React, existen dos tipos de objetos
						principales: los elementos y los componentes.
						<br />
						En comparaci√≥n a los elementos, los componentes en React
						tienen una l√≥gica m√°s diferente y compleja. Por ello,
						para ense√±arte qu√© son los componentes en React,
						utilizaremos un ejemplo m√°s pr√°ctico. Supongamos que
						tenemos el siguiente elemento, que, aunque hemos creado
						con una l√≠nea de c√≥digo JSX, podr√≠amos haber creado
						tranquilamente con el comando react.create element:
						<br />
						<div className='container-code'>
						<Image className="image" src='/assets/codigo/code1.png' width={600} height={280} alt="React"/>
						</div>
						<br />
					</p>
					<p className='descripcion'>
						La constante rootElement cumple el √∫nico prop√≥sito de
						guargar el ID ‚Äòroot‚Äô del elemento. Por su parte, las
						constantes helloWorld y goodbyeWorld guardan spans con
						un mensaje similar a su nombre.
						<br />
						Entonces, supongamos que queremos crear m√°s spans con
						mensajes espec√≠ficos. Hacer el mismo proceso de crear
						una constante en la que guardamos un span con un texto
						puede volverse tedioso. Por ello, podr√≠amos crear una
						funci√≥n en la que pasamos un texto y el programa nos
						devuelve el texto contenido dentro de un span.
						<br />
						A continuaci√≥n, te mostramos c√≥mo utilizamos los
						componentes en React para crear esta funci√≥n:
						<br />
						<div className='container-code'>
						<Image className="image" src='/assets/codigo/code2.png' width={600} height={280} alt="React"/>
						</div>
						<br />
					</p>
					<p className='descripcion'>
						En las l√≠neas de c√≥digo anteriores, hemos creado una
						nueva constante Message. Esta constante es realmente un
						componente de tipo funci√≥n que coge el objeto props de
						un elemento y hace que su propiedad msg se encierre
						dentro de un span. Luego, hemos definido un elemento
						element, en el que hemos insertado los componentes
						Message, cada uno con un msg igualado a mensajes
						distintos. Estos ser√°n los pasados por la funci√≥n
						Message.
						<br />
						No olvides que, para que un componente sea renderizado
						por ReactDOM, debes asegurarte de que su nombre est√°
						escrito con la primera letra en may√∫sculas. De esta
						manera, cuando React.createElement quiere crear un
						elemento para pas√°rselo a ReactDOM, puede distinguir
						entre un elemento nativo o puro del DOM, como lo ser√≠a
						un div, y un elemento que nosotros hemos creado.
					</p>
					<h2 className='titulo'>
						¬øQu√© son los componentes en React?
					</h2>
					<p className='descripcion'>
						Como has podido ver en el ejemplo anterior, los
						componentes en React son funciones que reciben el objeto
						de propiedades props como par√°metro y devuelven
						elementos React. Entonces, podemos utilizar las
						propiedades que conforman el objeto props para ejecutar
						acciones autom√°ticas. En el ejemplo anterior, las usamos
						para acceder a un texto msg y transformarlo en un span
						con dicho texto.
						<br />
						Exiaten dos tipos de componentes de React:
					</p>
					<h2 className='subtitulo-center'>
						üëâ los componentes de tipo funci√≥n
					</h2>
					<br />
					<div className='container-code'>
					<Image className="image" src='/assets/codigo/code3.png' width={600} height={50} alt="React"/>
					</div>
					<br />
					<h2 className='subtitulo-center'>
						üëâ los componentes de tipo clase
					</h2>
					<br />
					<div className='container-code'>
					<Image className="image" src='/assets/codigo/code4.png' width={600} height={150} alt="React"/>
					</div>
					<br />
					<p className='descripcion'>
						Como puedes ver en las anteriores l√≠neas de c√≥digo, para
						acceder a una propiedad del objeto props en un
						componente tipo clase deber√°s utilizar el comando this.
						Este comando tiene el mismo sentido que en JavaScript,
						por lo que te recomendamos leer nuestro post sobre qu√©
						es this en JavaScript para conocer m√°s sobre √©l. Adem√°s,
						todo componente tipo clase debe tener una funci√≥n de
						tipo render, que b√°sicamente nos define qu√© se va a
						renderizar en pantalla. Dentro de esta funci√≥n es donde
						insertamos nuestro return. En la pr√°ctica, utilizaremos
						mucho m√°s a menudo el formato de componentes en React
						tipo funci√≥n. Con este m√©todo, no solo nos ahorramos
						l√≠neas de c√≥digo, sino que tambi√©n evitamos lidiar con
						this, un comando que no siempre es tan espec√≠fico como
						queremos.
						<br />
					</p>
				</article>
			</section>
		</>
	)
}
